from typing import Union, Any

import telebot  # pip install pyTelegramBotAPI https://pypi.org/project/pyTelegramBotAPI/
from telebot import types
import config

quest = config.quest
intros = config.intros
number_of_q = len(quest)

import urllib.request

bot = telebot.TeleBot(config.token)
user_state = {}
user_param = {'test_q_no': 0,
              'scores': [0, 0, 0, 0, 0, 0, 0, 0, 0],
              'results': [0, 0, 0, 0, 0, 0, 0, 0, 0],
              }

# test_q_no = 0
keybord_yes_no = 0
do_test = False

# @NSP_BAD_bot @NSP_BAD_1_bot

keybord_yes_no = types.InlineKeyboardMarkup(row_width=2)
yes_button = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
no_button = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
btn_menu = types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
keybord_yes_no.add(yes_button, no_button, btn_menu)

keybord_results = types.InlineKeyboardMarkup(row_width=2)
# btn_menu = types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
keybord_results.add(btn_menu)

keybord_main = types.InlineKeyboardMarkup(row_width=2)
yes_button = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data='start_test')
no_button = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞', callback_data='test_info')
# btn_menu = types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
keybord_main.add(yes_button, no_button, btn_menu)

txt_menu = '''–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π:'''
kbd_menu = types.InlineKeyboardMarkup(row_width=1)
btn_test_menu = types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è', callback_data='test_menu')
btn_bio_test_menu = types.InlineKeyboardButton(text='–ë–∏–æ—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='bio_test_info')
btn_ask_question = types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='ask_question')
btn_register = types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='register')
btn_partner_programs = types.InlineKeyboardButton(text='–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∑–∞—Ä–∞–±–æ—Ç–æ–∫', callback_data='partner_programs')
btn_about_nsp = types.InlineKeyboardButton(text='–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ—ë –ø—Ä–æ–¥—É–∫—Ü–∏–∏', callback_data='about_nsp')
btn_disc_card = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å–∫–æ–Ω—Ç–Ω—É—é –∫–∞—Ä—Ç—É –∫–ª–∏–µ–Ω—Ç–∞', callback_data='get_disc_card')
# btn_menu = types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='get_disc_card')
kbd_menu.add(btn_test_menu, btn_bio_test_menu, btn_ask_question, btn_register, btn_partner_programs, btn_about_nsp, btn_disc_card)


# txt_welcome = '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
# –í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å —á–∞—Ç –±–æ—Ç–æ–º.
# <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∑–µ–ª–µ–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É.</b>
# –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
# - –ü—Ä–æ–π—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ 48 –≤–æ–ø—Ä–æ—Å–æ–≤.
# - –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ—ë –ø—Ä–æ–¥—É–∫—Ü–∏–∏.
# - –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Å–∫–æ–Ω—Ç–Ω—É—é –∫–∞—Ä—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
# - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ
# - –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã:
#    - –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º.
#    - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –±–∏–æ—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–û–±–µ—Ä–æ–Ω".
#    - –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –≤–µ–±–∏–Ω–∞—Ä–∞—Ö –∏ –ª–µ–∫—Ü–∏—è—Ö –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏.
#    - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –≤–æ–ø—Ä–æ—Å—ã.\n
# <b>–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç".</b>'''

txt_welcome = '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
<b>–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç".</b>
<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É.</b>
'''


@bot.message_handler(content_types=["photo"])
def start1(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    ext = ''
    if len(file_info.file_path) > 4:
        if file_info.file_path[-4] == '.':
            ext = file_info.file_path[-4:]
    src = 'C:\\it\\Projects\\botik\\photos\\' + message.photo[-1].file_id[-4:] + ext
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, txt_welcome, parse_mode='html', reply_markup=keybord_main)



@bot.message_handler(commands=['menu'])
def start(message):
    bot.send_message(message.chat.id, txt_menu, parse_mode='html', reply_markup=kbd_menu)


    # bot.send_photo(message.chat.id, photo='https://drive.google.com/file/d/1RgvFCr4a6EQTSYGAFppyu-UwwJCVIQwL/view')
    # bot.send_sticker(message.chat.id, sticker='https://t.me/addstickers/HotCherry/4')
    # bot.send_sticker(message.chat.id, sticker='[ üòÇ Sticker]')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global user_state
    if call.data in ['yes', 'no', 'start_test']:

        if call.data in ['yes', 'no']:
            if not call.from_user.username in user_state:
                user_state[call.from_user.username] = user_param.copy()
            q_no_prev: int = user_state[call.from_user.username]['test_q_no'] - 1
            if call.data == 'yes':
                scores = user_state[call.from_user.username]['scores']
                for s in range(len(scores)):
                    scores[s] += quest[q_no_prev][1][s] if call.data == 'yes' else 0
                user_state[call.from_user.username]['scores'] = scores
            if q_no_prev == number_of_q - 1:  # —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
                scores = user_state[call.from_user.username]['scores']
                results = config.test(scores)
                user_state[call.from_user.username]['results'] = results
                user_state[call.from_user.username]['test_q_no'] = 0
                txt_results = '<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b>\n'
                for r in range(len(results)):
                    bb, be = ('<b>', '</b>') if results[r] < 2 else ('', '')
                    txt_results += f'{config.systems[r][0]}:\n {bb}{config.marks[results[r]]}{be};\n\n'
                txt_results += '\n–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫: –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ - –•–æ—Ä–æ—à–æ - –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ.'
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=txt_results, parse_mode='html', reply_markup=keybord_results)
                return
            else:
                user_state[call.from_user.username]['test_q_no'] += 1

        elif call.data == 'start_test':
            if not call.from_user.username in user_state:
                user_state[call.from_user.username] = user_param.copy()
            user_state[call.from_user.username]['test_q_no'] = 1
        q_no = user_state[call.from_user.username]['test_q_no'] - 1  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∏–Ω–¥–µ–∫—Å
        colon = ':' if quest[q_no][2] == 2 else ''
        msg = intros[quest[q_no][2]] + colon + ' <b>' + quest[q_no][0].lower() + '</b>?'
        msg = f'–û—Ç–º–µ—Ç—å—Ç–µ —Ç–µ –æ—â—É—â–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã), –∫–æ—Ç–æ—Ä—ã–µ —É –í–∞—Å –µ—Å—Ç—å, –æ—Ç–≤–µ—Ç–∏–≤ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç". –í–æ–ø—Ä–æ—Å {q_no + 1} –∏–∑ {number_of_q}:\n\n' + msg
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              parse_mode='html', reply_markup=keybord_yes_no)
    elif call.data == 'test_menu':
        # bot.send_message(message.chat.id, txt_welcome, parse_mode='html', reply_markup=keybord_main)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=txt_welcome,
                              parse_mode='html',
                              reply_markup=keybord_main)
    elif call.data == 'test_info':
        # info = '''–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ª—É—á—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        # <b>NSP - Nature‚Äôs Sunshine Products, Inc</b> - –ª–∏–¥–µ—Ä–æ–º –Ω–∞ —Ä—ã–Ω–∫–µ Wellness (–ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –∫—Ä–∞—Å–æ—Ç—ã).'''
        info = '''–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞–º–∏. 
        –í —Ç–µ—Å—Ç–µ 48 –≤–æ–ø—Ä–æ—Å–æ–≤, –µ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ–≥–æ –∑–∞ 10 –º–∏–Ω—É—Ç. –ù–∞—à —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –í–∞—à–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞, –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è, 
        –≤–∫–ª—é—á–∞—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏! 
        –¢–µ—Å—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç –∏ –≤ —Ç–æ–∂–µ –≤—Ä–µ–º—è –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω - –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑—ã –∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã. 
        –û—Ç–º–µ—Ç—å—Ç–µ —Ç–µ –æ—â—É—â–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã), –∫–æ—Ç–æ—Ä—ã–µ —É –í–∞—Å –µ—Å—Ç—å, –æ—Ç–≤–µ—Ç–∏–≤ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".
        <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.</b>'''
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=info,
                              parse_mode='html',
                              reply_markup=keybord_main)
    elif call.data == 'menu':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=txt_menu,
                              parse_mode='html',
                              reply_markup=kbd_menu)

@bot.message_handler(content_types=["text"])
def handle_txt(message):
    dev_chat_id = 1916153575
    if not message.from_user.username == 'serg_ut':
        mes = f'<b>{message.text}</b>\n from: {str(message.from_user.full_name)}, (ci:mi): ({str(message.chat.id)},{str(message.id)})'
        bot.send_message(dev_chat_id,  mes, parse_mode='html')
    else:
        if message.reply_to_message:
            pos = message.reply_to_message.text.find('ci:mi')
            if pos > -1:
                mes = message.reply_to_message.text[pos+9:-1]
                ci, mi = map(int, mes.split(','))
                bot.send_message(ci, message.text, parse_mode='html')

        #send_report()



# @bot.message_handler(content_types=["document"])
# def get_message(message):
#     main_keybord = types.InlineKeyboardMarkup(row_width=2)
#     yes_button = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
#     no_button = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
#     main_keybord.add(yes_button, no_button)
#     bot.send_message(message.chat.id, '–í–æ–ø—Ä–æ—Å–∏–∫–∏', reply_markup=main_keybord)
#
#     global do_test
#     if do_test:
#         global cur_quest
#         cur_quest[message.chat.id] += 1
#         if cur_quest[message.chat.id] > 5:
#             do_test = False
#         bot.send_message(message.chat.id, quest[cur_quest[message.chat.id]][0], parse_mode='html')
#         button = types.ReplyKeyboardMarkup(row_width=2)  # resize_keyboard=True
#         btn1 = types.KeyboardButton('–î–∞')
#         btn0 = types.KeyboardButton('–ù–µ—Ç')
#         button.add(btn1, btn0)
#         bot.send_message(message.chat.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=button)
    # if message.text == '–ü–æ–º–∞—Ö–∞–π':
    #     # sticker = open('stickers/cherry_waves_her_hand.tgs', 'rb')
    #     # bot.send_sticker(message.chat.id, sticker)
    #     bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAANZYne8mAtOdt4uwjnkYRYqAxp2uxAAAgUAA8A2TxP5al-agmtNdSQE')
    # elif message.text == '–ü–æ—Ö–ª–æ–ø–∞–π':
    #     sticker = open('stickers/cherry_waves_her_hand.tgs', 'rb')
    #     bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAANUYne75L7rjavUkKSH1gAB2mq57BafAAIdAAPANk8TXtim3EE93kgkBA')
    #     # sticker.close()
    # elif message.text == '–û—Ñ–∏—Å':
    #     bot.send_location(message.chat.id, 55.78306768925437, 37.59799936431071)
    # elif message.text == 'Menu 1':
    #     bot.send_message(message.chat.id, f'{message.text * 3}')


# @bot.message_handler(commands=['wave_hand'])
# def wave(message):
#     sticker = open('stickers/cherry_waves_her_hand.tgs', 'rb')
#     bot.send_sticker(message.chat.id, sticker)
#     sticker.close()


@bot.message_handler(content_types=["document"])
def handle_docs_audio(message):
    document_id = message.document.file_id
    file_info = bot.get_file(document_id)
    urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.token}/{file_info.file_path}', file_info.file_path)


# @bot.message_handler(content_types=["sticker"])
# def get_sticker(message):
#     #bot.send_message(message.chat.id, content_types, parse_mode='html')
#     sticker_id = message.sticker.file_id
#     bot.send_message(message.chat.id, f'sticker.file_id: {sticker_id}')
#
#     # file_info = bot.get_file(sticker_id)
#     # res = urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.token}/{file_info.file_path}', file_info.file_path)
#     # bot.send_sticker(message.chat.id, message.sticker.file_id)


# @bot.message_handler(commands=['menu'])
# def menu(message):
#     # button = types.InlineKeyboardMarkup()
#     # button.add(types.InlineKeyboardButton('Menu 1', url='ya.ru'))
#     # button.add(types.InlineKeyboardButton('Menu 2', url='ya.ru'))
#     bot.send_message(message.chat.id, 'msg', parse_mode='html')
#     button = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton('Menu_1', 'info')
#     btn2 = types.KeyboardButton('Menu_2')
#     button.add(btn1, btn2)
#     bot.send_message(message.chat.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=button)

if __name__ == '__main__':
    # bot.polling(none_stop=True)
    bot.infinity_polling()
